EXPORTING FROM CPSSKINS
=======================

Important notice: in the current state of the CPSSkins exporter, you
will still need to keep CPSSkins and its themes in your portal so that 
the exported theme actually works. The reason becomes obvious if you
read the section about URIs correction below.

Preparations
------------

You need to have the CPSDesignerThemes product in the Zope instance
from which you plan to export the theme, BUT it musn't be active.

Create an External Method at the root of the portal. 
   id : cpsskins_export
   module: CPSDesignerThemes.cpsskins_export
   function: export

Retrieving the export
---------------------

DO NOT use a browser to retrieve the export. You can test the external
method with a browser if you like, but browsers tend to rewrite some
elements in a way that will make the theme unusable (not XML valid, in
particular)

To retrieve a page, call the external method with a tool like
wget, from the directory that you have selected to store the theme.
For the default theme and page:

    wget -nH -p http://example.com/cpsskins_export

The CPSSkins page and theme negociaton applies. Therefore, to retrieve
the 'Front' page of the default theme, you must execute:

    wget -nH -p http://example.com/cpsskins_export?page=Front

For the "Foo" page of the "bar" theme, the call would be:

    wget -nH -p http://example.com/cpsskins_export?theme=bar&page=Foo

The name of the directory from which you launch these commands should
be equal to the targeted name for the theme within CPSDesignerThemes.

Correcting file names
---------------------

With the examples above, the html pages that make your theme have been
named 'cpsskins_export', or cpsskins_export?page=Front in your theme
directory. Rename them according to the conventions of the them
container you plan to use.
With the default settings, that would be 'index.html' and
'Front.html', respectively.

In situations where the exported portal isn't at the root of the host
(for instance: http://localhost:8080/cps, or
http://example.com/internal/portal), with the wget commands above,
you'll find the exported pages deeper in the hierarchy. Namely, in
'./cps' or './internal/portal'. For simplicity and compatibility of
theme negociation, you should move them to the top of your theme
hierarchy, but don't move the exported resources around.

Checking and correcting URIs
----------------------------

The export process tries and rewrites URIs (for images, stylesheets)
to remove the host part from them, since that would not make sense for
the themes engine. Check that it got all of them, and correct the
remaining ones, if any.

The correction is done with the cps:// URL scheme. This is a
CPSDesignerThemes specificity that 
translates as the base portal URL at rendering time. You
have to replace the base URL of your portal with cps://.

In case your portal is at http://example.com, you have to rewrite all
URIs such as http://example.com/foo/bar/image.png like this:
   cps://foo/bar/image.png

In case you portal is at http://example.com/cps, you have to rewrite
http://example.com/cps/foo/bar/image.png as
   cps://foo/bar/image.png


Caveats: Dynamic vs static
--------------------------

This export process simply saved what the page CPSSkins theme elements
(Templets) would have produced in a normal rendering of the same
context. This makes them essentially static.

An example that applies to the CPS 3.4 default theme:
the Language Templet (country flags) has been rendered in the pages.
Now, if you later on want to add a language to your CPS portal, the
flags and switching links won't be updated, because they are now harcoded
in your theme.

In this example, the easiest solution is of course to
manually edit the theme pages to add new links, but some other
Templets (Breadcrumb templet...) are much more problematic.

Most dynamical Templets have a counterpart Portlet, though. This
duplication is due to the fact that CPSPortlets has been written some
time after CPSSkins. You should replace very dynamic Templets (such as
the Breadcrum templet) with the corresponding Portlets in a slot,
either before exporting (put a Portal Box Group Templet to define the
new slot) or after exporting (cps:slot syntax).

In a more subtle way, it's part of CPSSkins' design to produce some
dynamic CSS and JavaScript linked resources. These are called renderCSS and
renderJS. Rewriting them with the cps:// URL scheme should prevent
strange side effects. 












