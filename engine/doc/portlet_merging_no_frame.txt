==============================================
Merging logic for the portlets, without frames
==============================================

The simplest case of portlets merging is the repetition of the whole slot
contents for each portlet to be merged, and injection on the porlet
title and body where specified with the ``cps:portlet`` attribute.

If you need more the portlets injection to be repeated in a precise
element below the slot (a *frame*), to bear special css markers
whatever, then you probably need frames, see the other page about that.

PREPARATIONS::

 >>> import os
 >>> from lxml import usedoctest
 >>> from Products.CPSDesignerThemes.tests.test_engine import get_engine
 >>> from Products.CPSDesignerThemes.interfaces import IThemeEngine

In the context of this test, we should have a predefined engine class
(PageEngine). Let's demonstrate that::

 >>> IThemeEngine.implementedBy(PageEngine)
 True

For the sake of these examples, we'll need a very minimal portlet
implementation::

 >>> class FakePortlet:
 ...
 ...     portal_type = 'Fake Portlet'
 ...
 ...     def __init__(self, pid, rendered):
 ...         self.id = pid
 ...         self.rendered = rendered
 ...
 ...     def getId(self):
 ...         return self.id
 ...
 ...     def title_or_id(self):
 ...         return self.id
 ...
 ...     def render_cache(self, *a, **kw):
 ...         return self.rendered

We'll keep a few basic portlets around to feed the examples::

 >>> PORTLET1 = FakePortlet('Portlet One', '<ul id="portlet1"><li>foo</li></ul>')
 >>> PORTLET2 = FakePortlet('Portlet Two', '<div id="portlet2">Hello, eggs</div>')
 >>> PORTLET3 = FakePortlet('Portlet Three', '<div id="portlet3">Hello, spam</div>')


Let's demonstrate how the engine looks for the 'cps:slot' attributes
and merges the portlets in there: what's inside the slot is repeated
for each portlet::

 >>> engine = get_engine(PageEngine, 'theme1', page='slot_no_frames.html')
 >>> slot_name, slot = engine.extractSlotElements().next()
 >>> engine.mergeSlot(slot, [PORTLET1], additional_css=False)
 >>> body = engine.getHtmlElementsByName('body')[0]
 >>> print engine.dumpElement(body)
 <body xmlns="http://www.w3.org/1999/xhtml">
  <div class="slot">
   <p class="par">
    <span>Portlet One</span>
    <div>
     <ul id="portlet1">
       <li>foo</li>
     </ul>
    </div>
   </p>
  </div>
 </body>

Now with two portlets, see how the contents of the slot is entirely repeated::

 >>> engine = get_engine(PageEngine, 'theme1', page='slot_no_frames.html')
 >>> slot_name, slot = engine.extractSlotElements().next()
 >>> engine.mergeSlot(slot, [PORTLET1, PORTLET2], additional_css=False)
 >>> body = engine.getHtmlElementsByName('body')[0]
 >>> print engine.dumpElement(body)
 <body xmlns="http://www.w3.org/1999/xhtml">
  <div class="slot">
   <p class="par">
    <span>Portlet One</span>
    <div>
     <ul id="portlet1">
       <li>foo</li>
     </ul>
    </div>
   </p>
   <p class="par">
    <span>Portlet Two</span>
    <div>
     <div id="portlet2">Hello, eggs</div>
    </div>
   </p>
  </div>
 </body>

If you need to distinguish in CSS the first and last portlet in the
slot, you'll need frames::

 >>> engine = get_engine(PageEngine, 'theme1', page='slot_no_frames.html')
 >>> slot_name, slot = engine.extractSlotElements().next()
 >>> engine.mergeSlot(slot, [PORTLET1, PORTLET2], additional_css=True)
 >>> body = engine.getHtmlElementsByName('body')[0]
 >>> print engine.dumpElement(body)
 <body xmlns="http://www.w3.org/1999/xhtml">
  <div class="slot">
   <p class="par">
    <span>Portlet One</span>
    <div>
     <ul id="portlet1">
       <li>foo</li>
     </ul>
    </div>
   </p>
   <p class="par">
    <span>Portlet Two</span>
    <div>
     <div id="portlet2">Hello, eggs</div>
    </div>
   </p>
  </div>
 </body>

Now let's see how the frame repetition works in conjuction with the
cps:remove attribute::

 >>> engine = get_engine(PageEngine, 'theme1', page='slot_remove_simple.html')
 >>> slot_name, slot = engine.extractSlotElements().next()
 >>> engine.mergeSlot(slot, [PORTLET1, PORTLET2])
 >>> print engine.dumpElement(slot)
 <div xmlns="http://www.w3.org/1999/xhtml">
  <span>Portlet One</span>
  <div>
   <ul id="portlet1">
     <li>foo</li>
   </ul>
  </div>
  <span>Portlet Two</span>
  <div>
   <div id="portlet2">Hello, eggs</div>
  </div>
 </div>

Similarly, if either the element bearing the cps:portlet="title" or
the cps:porlet="body" also has a "cps:remove", it is omitted. This is
mostly useful to ease the work of automatic themes generator, like
CPSSkins'exporter. Let's try the title first::

 >>> engine = get_engine(PageEngine, 'theme1', page='portlet_remove_title.html')
 >>> slot_name, slot = engine.extractSlotElements().next()
 >>> engine.mergeSlot(slot, [PORTLET1,], additional_css=False)
 >>> print engine.dumpElement(slot)
 <div xmlns="http://www.w3.org/1999/xhtml">
 <p>
  Portlet One
  <div>
   <ul id="portlet1">
     <li>foo</li>
   </ul>
  </div>
 </p>
 </div>

Now cps:remove on the portlet body::

 >>> engine = get_engine(PageEngine, 'theme1', page='portlet_remove_body.html')
 >>> slot_name, slot = engine.extractSlotElements().next()
 >>> engine.mergeSlot(slot, [PORTLET1,], additional_css=False)
 >>> print engine.dumpElement(slot)
 <div xmlns="http://www.w3.org/1999/xhtml">
  <p>
   <span>Portlet One</span>
   <ul id="portlet1">
     <li>foo</li>
   </ul>
  </p>
 </div>

The engine must accept a missing cps:portlet='title' in slot::

 >>> engine = get_engine(PageEngine, 'theme1', page='no_portlet_title.html')
 >>> slot_name, slot = engine.extractSlotElements().next()
 >>> engine.mergeSlot(slot, [PORTLET1], additional_css=False)
 >>> print engine.dumpElement(slot)
 <div xmlns="http://www.w3.org/1999/xhtml">
  <p>
    <div>
     <ul id="portlet1">
       <li>foo</li>
     </ul>
    </div>
  </p>
 </div>

Similarly, the engine must accept a missing cps:portlet='body' in slot::

 >>> engine = get_engine(PageEngine, 'theme1', page='no_portlet_body.html')
 >>> slot_name, slot = engine.extractSlotElements().next()
 >>> engine.mergeSlot(slot, [PORTLET1], additional_css=False)
 >>> print engine.dumpElement(slot)
 <div xmlns="http://www.w3.org/1999/xhtml">
  <p>
   <span>Portlet One</span>
  </p>
 </div>
