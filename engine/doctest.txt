PREPARATIONS
>>> import os
>>> from lxml import usedoctest
>>> from Products.CPSPortlets.DummyPortlet import DummyPortlet
>>> from Products.CPSDesignerThemes.tests.test_engine import get_engine
>>> from Products.CPSDesignerThemes.interfaces import IThemeEngine

In the context of this test, we should have a predefined engine class
(PageEngine). Let's demonstrate that:
>>> IThemeEngine.implementedBy(PageEngine)
True

We'll keep the output of some basic portlets around to feed the
examples. The first element of each pair is the portlet title, the
second is the portlet output itself.
>>> PORTLET1 = ('Portlet One', '<ul id="portlet1"><li>foo</li></ul>')
>>> PORTLET2 = ('Portlet Two', '<div id="portlet2">Hello, eggs</div>')


Let's demonstrate how the engine looks for the 'cps:slot' attributes
and merges the portlets in there. In this case, the frame element is
the <p>:
>>> engine = get_engine(PageEngine, 'theme1', page='simple_slot.html')
>>> slot_name, slot = engine.extractSlotElements().next()
>>> frame_parent, frame = engine.extractSlotFrame(slot)
>>> engine.mergePortlets(frame_parent, frame, [PORTLET1])
>>> print engine.dumpElement(slot)
<div xmlns="http://www.w3.org/1999/xhtml">
 <p>
  <span>Portlet One</span>
  <div>
   <ul id="portlet1">
     <li>foo</li>
   </ul>
  </div>
 </p>
</div>

Now with two portlets:
>>> engine = get_engine(PageEngine, 'theme1', page='simple_slot.html')
>>> slot_name, slot = engine.extractSlotElements().next()
>>> frame_parent, frame = engine.extractSlotFrame(slot)
>>> engine.mergePortlets(frame_parent, frame, [PORTLET1, PORTLET2])
>>> print engine.dumpElement(slot)
<div xmlns="http://www.w3.org/1999/xhtml">
 <p>
  <span>Portlet One</span>
  <div>
   <ul id="portlet1">
     <li>foo</li>
   </ul>
  </div>
 </p>
 <p>
  <span>Portlet Two</span>
  <div>
   <div id="portlet2">Hello, eggs</div>
  </div>
 </p>
</div>

If the frame has a cps:remove attribute, the frame enclosing tag will
be omitted.
>>> engine = get_engine(PageEngine, 'theme1', page='slot_remove_simple.html')
>>> slot_name, slot = engine.extractSlotElements().next()
>>> frame_parent, frame = engine.extractSlotFrame(slot)
>>> engine.mergePortlets(frame_parent, frame, [PORTLET1])
>>> print engine.dumpElement(slot)
<div xmlns="http://www.w3.org/1999/xhtml">
 <span>Portlet One</span>
 <div>
  <ul id="portlet1">
    <li>foo</li>
  </ul>
 </div>
</div>

Now let's see how the frame repetition works in conjuction with the
cps:remove attribute:
>>> engine = get_engine(PageEngine, 'theme1', page='slot_remove_simple.html')
>>> slot_name, slot = engine.extractSlotElements().next()
>>> frame_parent, frame = engine.extractSlotFrame(slot)
>>> engine.mergePortlets(frame_parent, frame, [PORTLET1, PORTLET2])
>>> print engine.dumpElement(slot)
<div xmlns="http://www.w3.org/1999/xhtml">
 <span>Portlet One</span>
 <div>
  <ul id="portlet1">
    <li>foo</li>
  </ul>
 </div>
 <span>Portlet Two</span>
 <div>
  <div id="portlet2">Hello, eggs</div>
 </div>
</div>

Similarly, if either the element bearing the cps:portlet="title" or
the cps:porlet="body" also has a "cps:remove", it is omitted. This is
mostly useful to ease the work of automatic themes generator, like
CPSSkins'exporter. Let's try the title first:
>>> engine = get_engine(PageEngine, 'theme1', page='portlet_remove_title.html')
>>> slot_name, slot = engine.extractSlotElements().next()
>>> frame_parent, frame = engine.extractSlotFrame(slot)
>>> engine.mergePortlets(frame_parent, frame, [PORTLET1,])
>>> print engine.dumpElement(slot)
<div xmlns="http://www.w3.org/1999/xhtml">
<p>
 Portlet One
 <div>
  <ul id="portlet1">
    <li>foo</li>
  </ul>
 </div>
</p>
</div>

Now cps:remove on the body:
>>> engine = get_engine(PageEngine, 'theme1', page='portlet_remove_body.html')
>>> extracted_slots = engine.extractSlotElements()
>>> slot_name, slot = engine.extractSlotElements().next()
>>> frame_parent, frame = engine.extractSlotFrame(slot)
>>> engine.mergePortlets(frame_parent, frame, [PORTLET1,])
>>> print engine.dumpElement(slot)
<div xmlns="http://www.w3.org/1999/xhtml">
 <p>
  <span>Portlet One</span>
  <ul id="portlet1">
    <li>foo</li>
  </ul>
 </p>
</div>

The engine must accept a missing cps:portlet='title' in slot:
>>> engine = get_engine(PageEngine, 'theme1', page='no_portlet_title.html')
>>> slot_name, slot = engine.extractSlotElements().next()
>>> frame_parent, frame = engine.extractSlotFrame(slot)
>>> engine.mergePortlets(frame_parent, frame, [PORTLET1])
>>> print engine.dumpElement(slot)
<div xmlns="http://www.w3.org/1999/xhtml">
 <p>
   <div>
    <ul id="portlet1">
      <li>foo</li>
    </ul>
   </div>
 </p>
</div>

Similarly, the engine must accept a missing cps:portlet='body' in slot:
>>> engine = get_engine(PageEngine, 'theme1', page='no_portlet_body.html')
>>> slot_name, slot = engine.extractSlotElements().next()
>>> frame_parent, frame = engine.extractSlotFrame(slot)
>>> engine.mergePortlets(frame_parent, frame, [PORTLET1])
>>> print engine.dumpElement(slot)
<div xmlns="http://www.w3.org/1999/xhtml">
 <p>
  <span>Portlet One</span>
 </p>
</div>
